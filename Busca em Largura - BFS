# Importando a biblioteca para poder criar uma lista
from collections import defaultdict

# Classe para criação do grafo
class Graph:
  
    # Constrói a função que cria a lista
    def __init__(self):
        # Criação da lista
        self.graph = defaultdict(list)
        

    # Função para adicionar os vértices no grafo
    def addEdge(self, u, v):
        self.graph[u].append(v)

    # Função para imprimir a BFS do grafo, recebe o primeiro nó a ser visitado
    def bfs(self, start_vertex):

        # Marca todos os vértices no grafo como não visitados
        visitado = [False] * (len(self.graph))

        # Cria uma fila vazia para a BFS
        queue = []

        # Pega o nó de origem, marca como visitado e insere na fila de visitados
        queue.append(start_vertex)
        visitado[start_vertex] = True

        # Enquanto a fila não for vazia
        while queue:
            # Retira o último vértice inserido na fila e imprime
            start_vertex = queue.pop(0)
            print(f'Visitando vértice {start_vertex}')

            # Obtém todos os vértices adjacentes dos vértices desenfileirando a fila
            for i in self.graph[start_vertex]:
              print(visitado[i])
              if visitado[i] == False:
                  queue.append(i)
                  visitado[i] = True


# Exemplo de uso
if __name__ == "__main__":
    # Criando um grafo com 6 vértices (de 0 a 5)
    graph = Graph()
    graph.addEdge(0,2)
    graph.addEdge(0,3)
    graph.addEdge(0,4)
    graph.addEdge(1,2)
    graph.addEdge(1,4)
    graph.addEdge(2,4)
    graph.addEdge(3,4)
    graph.addEdge(3,5)
    graph.addEdge(4,5)
    graph.addEdge(5,1)

    print("Busca em largura começando do vértice 0:")
    graph.bfs(0)
  
