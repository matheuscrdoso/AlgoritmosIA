# Importando a biblioteca para poder criar uma lista
from collections import defaultdict

# Classe para criação do grafo
class Graph:
  
    # Constrói a função que cria a lista
    def __init__(self, num_vertices):
        # Criação da lista
        self.graph = defaultdict(list)
        self.num_vertices = num_vertices

    # Função para adicionar os vértices no grafo
    def addEdge(self, u, v):
        self.graph[u].append(v)

    # Função para imprimir a BFS do grafo, recebe o primeiro nó a ser visitado
    def bfs(self, start_vertex):

        # Marca todos os vértices no grafo como não visitados
        visitado = [False] * self.num_vertices

        # Cria uma fila vazia para a BFS
        queue = []

        # Pega o nó de origem, marca como visitado e insere na fila de visitados
        queue.append(start_vertex)
        visitado[start_vertex] = True

        # Enquanto a fila não for vazia
        while queue:
            # Retira o último vértice inserido na fila e imprime
            vertex = queue.pop(0)
            print(f'Visitando vértice {vertex}')

            # Obtém todos os vértices adjacentes dos vértices desenfileirando a fila
            for vizinho in self.graph[vertex]:
                if not visitado[vizinho]:
                    queue.append(vizinho)
                    visitado[vizinho] = True


# Exemplo de uso
if __name__ == "__main__":
    # Criando um grafo com 6 vértices (de 0 a 5)
    num_vertices = 6
    graph = Graph(num_vertices)
    graph.addEdge(0, 1) 
    graph.addEdge(0, 2) 
    graph.addEdge(1, 3)
    graph.addEdge(1, 5) 
    graph.addEdge(2, 3) 
    graph.addEdge(2, 4) 
    graph.addEdge(4, 5) 

    print("Busca em largura começando do vértice 0:")
    graph.bfs(0)
