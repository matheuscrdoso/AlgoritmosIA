# -*- coding: utf-8 -*-
"""IA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17xJQL3Qr_97AqLluF_48z2sHg6LtcDeb
"""

# Busca de aprofundamento iterativo


class Node:
    def __init__(self, data):
        self.data = data
        self.children = []

def iterative_deepening_search(root, target):
    depth = 0  # Começamos com profundidade 0
    while True:
        result = depth_limited_search(root, target, depth)
        if result is not None:
            return result
        depth += 1  # Aumenta a profundidade máxima permitida

def depth_limited_search(node, target, depth):
    if depth == 0:
        if node.data == target:
            return node
        else:
            return None
    if depth > 0:
        for child in node.children:
            result = depth_limited_search(child, target, depth - 1)
            if result is not None:
                return result

# Exemplo de uso
# Construa sua árvore de busca primeiro
root = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)
node6 = Node(6)
root.children = [node2, node3]
node2.children = [node4, node5]
node3.children = [node6]

# Execute a busca
target_value = 5
result = iterative_deepening_search(root, target_value)
if result is not None:
   print(f'O valor {target_value} foi encontrado na árvore.')
else:
   print(f'O valor {target_value} não foi encontrado na árvore.')



